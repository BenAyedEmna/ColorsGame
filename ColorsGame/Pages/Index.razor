@page "/"

@using Models;
@using System.Threading;

@if (ActuelGrid.GameIsNotStarted())
{
    <button class="start" @onclick="Start">Start!</button>
}

@if (ActuelGrid.GameIsStarted() || ActuelGrid.CountingTime())
{
    <div>Level:@niveau.Niveau</div>
    <div> choise @ActuelGrid.TrueColor </div>

    <table class="table">
        @for (var i = 0; i < ActuelGrid.Column; i++)
        {
            <tr>
                @for (var j = 0; j < ActuelGrid.Row; j++)
                {
                    if (ActuelGrid.grid[i][j].Color == ActuelGrid.TrueColor)
                    {
                        <td class="@ActuelGrid.TrueColor.ToString()" @onclick="ColorFounded"></td>
                    }
                    else
                    {
                        <td class="@ActuelGrid.FalseColor.ToString()" @onclick="Failed"></td>
                    }
                }
            </tr>
            @if (ActuelGrid.CountingTime())
            {
                SwitchPlace();
            }
        }
    </table>
}
else if (ActuelGrid.GameIsOver())
{
    <div class="GameOver">Game Over</div>
    <hr />
    <button @onclick="Start">Play again </button>
}

@code
{
    Level niveau = new Level();
    Grid ActuelGrid = new Grid();
    protected override Task OnInitializedAsync()
    {
        ActuelGrid.InitialGrid();
        niveau.Counter = 10;
        return base.OnInitializedAsync();
    }

    public void Start()
    {
        ActuelGrid.StartGame();
    }

    public void ColorFounded()
    {
        Console.WriteLine("cool");
        niveau.NextLevel(ActuelGrid);
        ActuelGrid.RefreshGrid(niveau.Niveau);
    }

    public void Failed()
    {
        niveau.Chance++;
        if (niveau.Chance == 2)
        {
            Console.WriteLine("Game over");
            ActuelGrid.GameOver();
            niveau.Niveau = 1;
        }
    }

    @*private static System.Timers.Timer aTimer;
        public int Count;
        public void StartTimer()
        {
            aTimer = new System.Timers.Timer(1000);
            aTimer.Elapsed += StartCountDown;
            aTimer.Enabled = true;
        }

        public void StartCountDown(Object source, System.Timers.ElapsedEventArgs e)
        {
            if (Count > 0)
            {
                Count--;
            }
            else
            {
                return;
                //aTimer.Enabled = false;

            InvokeAsync(() =>
            {
                StateHasChanged();
            });
    *@

    public int Count;
    public void StartCountdown()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            if (Count > 0)
            {
                Count--;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 1000, 1000);
    }

    public void SwitchPlace()
    {
        Count = niveau.Counter;
        StartCountdown();
        if (Count == 0)
        {
            ActuelGrid.ColorAllTheGrid();
            ActuelGrid.RandomCellColored();
            Count = niveau.Counter;
        }
    }

}
