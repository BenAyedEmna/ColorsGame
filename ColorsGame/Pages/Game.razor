@page "/Game"
@using Models;
@using System.Threading;
@Count
@if (ActuelGrid.GameIsNotStarted())
{
    <button @onclick="Start">Start!</button>
}
@if (ActuelGrid.GameIsStarted() || ActuelGrid.CountingTime())
{
    <div>Level:@niveau.Niveau</div>
    @if (niveau.Counter > 0)
    {
        <div> choise @ActuelGrid.TrueColor before @niveau.Counter</div>
    }
    else
    {
        <div> choise @ActuelGrid.TrueColor </div>

    }
<table class="table">
    @for (var i = 0; i < ActuelGrid.Column; i++)
    {
        <tr>
            @for (var j = 0; j < ActuelGrid.Row; j++)
            {
                switch (ActuelGrid.grid[i][j].Color)
                {
                    case Colors.green:
                        if (Colors.green == ActuelGrid.TrueColor)
                        {
                            <td class="Green-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Green-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.blue:
                        if (Colors.blue == ActuelGrid.TrueColor)
                        {
                            <td class="Blue-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Blue-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.yellow:
                        if (Colors.yellow == ActuelGrid.TrueColor)
                        {
                            <td class="Yellow-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Yellow-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.red:
                        if (Colors.red == ActuelGrid.TrueColor)
                        {
                            <td class="Red-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Red-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.black:
                        if (Colors.black == ActuelGrid.TrueColor)
                        {
                            <td class="Black-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Black-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.grey:
                        if (Colors.grey == ActuelGrid.TrueColor)
                        {
                            <td class="Grey-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Grey-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.orange:
                        if (Colors.orange == ActuelGrid.TrueColor)
                        {
                            <td class="Orange-cell" @onclick="ColorFounded"></td>
                        }
                        else
                        {
                            <td class="Orange-cell" @onclick="Failed"></td>
                        }
                        break;
                    case Colors.purple:
                        if (Colors.purple == ActuelGrid.TrueColor)
                        {
                            <td class="Purple-cell" @onclick="ColorFounded"></td>
                            @*<td class="Purple-cell" @onclick=@StartCountdown></td>*@
                        }
                        else
                        {
                            <td class="Purple-cell" @onclick="Failed"></td>
                        }
                        break;
                }
            }
        </tr>
        @if (ActuelGrid.CountingTime())
        {
            Count = niveau.Counter;
            StartCountdown();
            if (Count == 0)
            {
                @for (var k = 0; k < ActuelGrid.Column; k++)
                {
                        @for (var l = 0; l < ActuelGrid.Row; l++)
                        {
                            ActuelGrid.grid[k][l].Color = ActuelGrid.FalseColor;
                        }
                }
                ActuelGrid.RandomCellColored(); 
            }
        }
    }
                </table>
}
else if (ActuelGrid.GameIsOver() == true)
{
    <div class="GameOver">Game Over</div>
    <hr />
    <button @onclick="Start">Play again </button>
}
@niveau.Counter


@code
{
    Level niveau = new Level();
    Grid ActuelGrid = new Grid();
    protected override Task OnInitializedAsync()
    {
        ActuelGrid.InitialGrid();
        niveau.Counter = 10;
        return base.OnInitializedAsync();
    }

    public void Start()
    {
        ActuelGrid.StartGame();
    }

    public void ColorFounded()
    {
        Console.WriteLine("coool");
        niveau.NextLevel(ActuelGrid);
        ActuelGrid.RefreshGrid(niveau.Niveau);
        if (niveau.Niveau > 6)
        {
            ActuelGrid.StartCountingTime();
        }
    }

    private int Count { get; set; } = 10; 

    public void Failed()
    {
        niveau.Chance++;
        if (niveau.Chance == 2)
        {
            Console.WriteLine("Game over");
            ActuelGrid.GameOver();
            niveau.Niveau = 1;
        }
    }

    public void StartCountdown()
    {
        var timer = new Timer(new TimerCallback(_ =>
        {
            if (Count > 0)
            {
                Count--;
                InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            }
        }), null, 1000, 1000);
    }
}

